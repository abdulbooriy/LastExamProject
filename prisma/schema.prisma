// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Users {
  id       String     @id @default(uuid())
  fullName String
  phone    String     @unique
  password String
  role     UserRole
  status   UserStatus @default(ACTIVE)
  balance  Int        @default(0)
  avatar   String?
  Salary   Salary[]
  Product  Product[]
  Partners Partners[]
  Purchase Purchase[]
  Contract Contract[]
  Payment  Payment[]
}

model Category {
  id       String    @id @default(uuid())
  title    String
  time     Int
  isActive Boolean
  image    String
  Product  Product[]
}

enum ProductUnits {
  KG
  LITR
  M2
  PIECE
}

model Product {
  id         String       @id @default(uuid())
  title      String
  sellPrice  Int
  buyPrice   Int
  quantity   Int
  categoryId String
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  units      ProductUnits
  userId     String?
  user       Users?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  isActive   Boolean
  comment    String?
  image      String
  Purchase   Purchase[]
  Contract   Contract[]
}

model Salary {
  id      String  @id @default(uuid())
  userId  String
  user    Users   @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount  Int
  comment String?
}

enum PartnerRole {
  SELLER
  CUSTOMER
}

model Partners {
  id       String      @id @default(uuid())
  fullName String
  phone    String      @unique
  userId   String?
  user     Users?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  isActive Boolean
  balance  Int
  role     PartnerRole
  address  String
  Purchase Purchase[]
  Payment  Payment[]
  Contract Contract[]
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String?
  user      Users?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  partnerId String
  partner   Partners @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  buyPrice  Int
  comment   String?
}

enum ContractStatus {
  ACTIVE
  PAID
  PARTIAL
  EXPIRED
  RETURNED
  CANCELED
}

model Contract {
  id            String          @id @default(uuid())
  partnerId     String
  partner       Partners        @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  productId     String
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId        String?
  user          Users?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  quantity      Int
  sellPrice     Int
  duration      Int
  status        ContractStatus  @default(ACTIVE)
  Debt          Debt[]
  ReturnProduct ReturnProduct[]
}

enum DebtStatus {
  UNPAID
  PARTIAL
  PAID
  OVERDUE
}

model Debt {
  id                   String     @id @default(uuid())
  contractId           String
  contract             Contract   @relation(fields: [contractId], references: [id], onDelete: Cascade)
  total                Int
  duration             Int
  monthlyPaymentAmount Int        @default(0)
  status               DebtStatus @default(UNPAID)
  Payment              Payment[]
}

model ReturnProduct {
  id         String   @id @default(uuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  isNew      Boolean
  reason     String?
}

enum PaymentType {
  CASH
  CARD
}

enum Type {
  IN
  OUT
}

model Payment {
  id          String      @id @default(uuid())
  partnerId   String
  partner     Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  debtId      String?
  debt        Debt?       @relation(fields: [debtId], references: [id], onDelete: SetNull)
  userId      String?
  user        Users?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  amount      Int
  comment     String?
  paymentType PaymentType
  type        Type
}
