// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model Users {
  id        String     @id @default(uuid())
  fullName  String
  phone     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  balance   Decimal    @default(0) @db.Decimal(10, 2)
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Salary    Salary[]
  Product   Product[]
  Partners  Partners[]
  Purchase  Purchase[]
  Contract  Contract[]
  Payment   Payment[]
}

model Category {
  id        String    @id @default(uuid())
  title     String
  time      Int
  isActive  Boolean
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

enum ProductUnits {
  KG
  LITR
  M2
  PIECE
}

model Product {
  id         String       @id @default(uuid())
  title      String
  sellPrice  Decimal      @db.Decimal(10, 2)
  buyPrice   Decimal      @db.Decimal(10, 2)
  quantity   Int
  categoryId String
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  units      ProductUnits
  userId     String?
  user       Users?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  isActive   Boolean
  comment    String?
  image      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Purchase   Purchase[]
  Contract   Contract[]
}

model Salary {
  id        String   @id @default(uuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Decimal  @db.Decimal(10, 2)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PartnerRole {
  SELLER
  CUSTOMER
}

model Partners {
  id        String      @id @default(uuid())
  fullName  String
  phone     String      @unique
  userId    String?
  user      Users?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  isActive  Boolean
  balance   Decimal     @db.Decimal(10, 2)
  role      PartnerRole
  address   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Purchase  Purchase[]
  Payment   Payment[]
  Contract  Contract[]
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String?
  user      Users?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  partnerId String
  partner   Partners @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  buyPrice  Decimal  @db.Decimal(10, 2)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id            String          @id @default(uuid())
  partnerId     String
  partner       Partners        @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  productId     String
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId        String?
  user          Users?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  quantity      Int
  sellPrice     Decimal         @db.Decimal(10, 2)
  duration      Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Debt          Debt[]
  ReturnProduct ReturnProduct[]
}

model Debt {
  id         String    @id @default(uuid())
  contractId String
  contract   Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  total      Decimal   @db.Decimal(10, 2)
  duration   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Payment    Payment[]
}

model ReturnProduct {
  id         String   @id @default(uuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  isNew      Boolean
  reason     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum PaymentType {
  CASH
  CARD
}

enum Type {
  IN
  OUT
}

model Payment {
  id          String      @id @default(uuid())
  partnerId   String
  partner     Partners    @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  debtId      String?
  debt        Debt?       @relation(fields: [debtId], references: [id], onDelete: SetNull)
  userId      String?
  user        Users?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  amount      Decimal     @db.Decimal(10, 2)
  comment     String?
  paymentType PaymentType
  type        Type
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
